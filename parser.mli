open Syntax

type token =
  | NUM of (int*(int*int))
  | ID of (string*(int*int))
  | STRINGS of (string list *(int*int))
  | D of ((int*int))
  | Z of ((int*int))
  | SUM of ((int*int))
  | LEAST of ((int*int))
  | LARGEST of ((int*int))
  | MIN of ((int*int))
  | MAX of ((int*int))
  | CONC of ((int*int))
  | HASH of ((int*int))
  | COUNT of ((int*int))
  | AND of ((int*int))
  | PLUS of ((int*int))
  | MINUS of ((int*int))
  | TIMES of ((int*int))
  | DIVIDE of ((int*int))
  | MOD of ((int*int))
  | LPAR of ((int*int))
  | RPAR of ((int*int))
  | LBRACE of ((int*int))
  | RBRACE of ((int*int))
  | COMMA of ((int*int))
  | ASSGN of ((int*int))
  | EQ of ((int*int))
  | NEQ of ((int*int))
  | LT of ((int*int))
  | GT of ((int*int))
  | LE of ((int*int))
  | GE of ((int*int))
  | DOTDOT of ((int*int))
  | SEMI of ((int*int))
  | LET of ((int*int))
  | IN of ((int*int))
  | FOREACH of ((int*int))
  | DO of ((int*int))
  | IF of ((int*int))
  | THEN of ((int*int))
  | ELSE of ((int*int))
  | CHOOSE of ((int*int))
  | DROP of ((int*int))
  | KEEP of ((int*int))
  | PICK of ((int*int))
  | DIFFERENT of ((int*int))
  | MEDIAN of ((int*int))
  | ACCUM of ((int*int))
  | REPEAT of ((int*int))
  | WHILE of ((int*int))
  | UNTIL of ((int*int))
  | FUNCTION of ((int*int))
  | CALL of ((int*int))
  | COMPOSITIONAL of ((int*int))
  | EOF of ((int*int))
  | SAMPLE of ((int*int))
  | HCONC of ((int*int))
  | VCONCL of ((int*int))
  | VCONCR of ((int*int))
  | VCONCC of ((int*int))
  | QUESTION of ((int*int))
  | MINIMAL of ((int*int))
  | MAXIMAL of ((int*int))
  | SETMINUS of ((int*int))
  | LBRACK of ((int*int))
  | RBRACK of ((int*int))
  | FIRST of ((int*int))
  | SECOND of ((int*int))
  | SIGN of ((int*int))
  | TILDE of ((int*int))
  | BANG of ((int*int))
  | FLOAT of (float*(int*int))

val dice :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Syntax.program
